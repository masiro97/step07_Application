<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>step07_Application</display-name>

  <!-- http://www.naver.com
	   http://www.naver.com:80/index.html

	   http://www.daum.net
	   htttp://www.daum.net:80/index.html
	   
	   http://ip:port/step_07_Application/login.html
	    - http://ip:port/step_07_Application 엔터칠 경우
	    첫 실행 파일을 설정하는 문장
-->
 <welcome-file-list>
    <welcome-file>main.jsp</welcome-file>
  </welcome-file-list>
  
<!-- tomcat(server)내부에 설정한 DB 동시 접속자 수 제어하는
	 Connection pooling 자원을 사용하겠다는 설정 
	 <resource-ref>
    	<res-ref-name>context.xml에 설정한 DB 접속자 수 제어하는 설정의 별칭 지정</res-ref-name>
    	<res-type>설정 정보에 맞게 관리하는 자바 타입
				  connection 객체 수 제어하는 자바타입    	
    	</res-type>
    	<res-auth>권한은 Container 즉 서버가 관리</res-auth>
  	 </resource-ref>
-->
  <resource-ref>
    <res-ref-name>jdbc/myoracle</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  
  <!-- 
  		URL mapping 기술
  		실제 구현할 servlet명과 가상의 url을 매핑하는 설정
  		Servlet인 경우 3버전 부터는 소스선언구에
  		@WebServlet("/cont")
  		
  		주의사항
  		1. 중복선언불가
  		2. 하나의 프로젝트 내에는 절대 동일한 url mapping 불가
  		
  		필요성
  			- xml의 설정 정보가 방대해지는 현상
  			- 설정에 대한 부분을 소스로 분산해서 관리하자는 요구 사항 반영
  			- 소스 자체에 주석이 아닌 기능이 있는 표기
  				(annotation)
  			(@Override, @WebServlet)
   -->
  <servlet>
    <servlet-name>AllController</servlet-name>
    <!-- 실제 존재하면서 실행되는 Servlet 이름 -->
    <servlet-class>controller.AllController</servlet-class>
  </servlet>
  <servlet-mapping>
  <!-- client가 브라우저에 입력하게 되는 주소
  	   http://ip:port/project명/cont
   -->
    <servlet-name>AllController</servlet-name>
    <url-pattern>/cont</url-pattern>
  </servlet-mapping>
  
  <!-- 
  		필요성
  			- 서버 시스템 자원 관리
  			
  		우체국(새마을금고)
  			 - 로그인 후 -> 딴 짓 (10분) -> 자동 로그아웃
  			 <session-config>
    		 	<session-timeout>
    		 		분 단위로 세션 자동 종료(그 어떠한 움직임이 없는 상황)
    		 		HttpSession API로 개발된 세션을 의미
    		 	</session-timeout>
  			 </session-config>
  			 
  		구글
  			 - 로그인 후 -> 딴 짓 -> 지속적인 로그인...?
  			 - 기술? client 시스템에 쿠키기술도 접목해서 활용
  			 - 의도? 사용자 편의성 고려, 사용자 정보를 더 종속적으로 관리?
   -->
  <session-config>
    <session-timeout>10</session-timeout>
  </session-config>
</web-app>